package com.csumb.cst363;

import java.sql.*;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

/**
* A doctor creates a new prescription and the patient gets the
* prescription filled at a pharmacy. Complete the methods marked with
* TODO in PrescriptionCreate and PrescriptionFill classes.
* */



@Controller
public class ControllerPrescriptionCreate {
	static final String DBURL = "jdbc:mysql://localhost:3306/drugstoredb";  // database URL
	static final String USERID = "root";
	static final String PASSWORD = "memorypastry";


	@Autowired
	private JdbcTemplate jdbcTemplate;

	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}

	/*
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * 5.  If error, return error message and the prescription form
	 * 6.  Otherwise, return the prescription with the rxid number that was generated by the database.
	 */




	@PostMapping("/prescription")
	public String newPrescription(Prescription p, Model model) {


		// TODO

		Connection conn = null;
		try {
			//Validate that Doctor SSN exists and matches Doctor Name.
			String query = "SELECT * FROM doctor WHERE ssn = ? AND last_name = ? AND first_name = ? LIMIT 1";
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setString(1, p.getDoctor_ssn());
			ps.setString(2, p.getDoctorLastName());
			ps.setString(3, p.getDoctorFirstName());
			ResultSet rs = ps.executeQuery();

			int docId = 0;
			if (!rs.next()) {
				// Doctor SSN does not exist or does not match Doctor Name.
				model.addAttribute("message", "Doctor SSN does not exist or does not match Doctor Name.");
				rs.beforeFirst();
				return "prescription_create";
			}else{
				docId = rs.getInt("id");
				model.addAttribute("message", docId);
			}


			// Validate that Patient SSN exists and matches Patient Name.

			query = "SELECT * FROM patient WHERE ssn = ? AND last_name = ? AND first_name = ? LIMIT 1";
			ps = conn.prepareStatement(query);
			ps.setString(1, p.getPatient_ssn());
			ps.setString(2, p.getPatientLastName());
			ps.setString(3, p.getPatientFirstName());
			rs = ps.executeQuery();


			int pId = 0;
			if (!rs.next()) {
				// Patient SSN does not exist or does not match Patient Name.
				model.addAttribute("message", "Patient SSN does not exist or does not match Patient Name.");
				return "prescription_create";
			}else{
				pId = rs.getInt("id");
			}

			if(p.getPatientLastName().isEmpty() || p.getPatientFirstName().isEmpty()){
				// Patient First or Last Name is Empty
				model.addAttribute("message", "Patient name fields cannot be empty.");
				return "prescription_create";
			}
			if(p.getPatient_ssn().isEmpty() || p.getPatient_ssn().matches("^0{1}[0-9]{8}")
					|| p.getPatient_ssn().matches("^9{1}[0-9]{8}") || p.getPatient_ssn().length() != 9){
				// Patient SSN is empty or starts with 0 or 9
				model.addAttribute("message", "Please enter a social security number that does not start with 0 or 9 and is 9 digits in length.");
				return "prescription_create";
			}
			if(!p.getPatient_ssn().matches("^[0-9]+$")){
				// Patient SSN contains non-numeric digits
				model.addAttribute("message", "Please enter an SSN that does not contain non-numeric values!");
				return "prescription_create";
			}
			if(p.getDoctorFirstName().isEmpty() || p.getDoctorLastName().isEmpty()){
				// Patient First or Last Name is Empty
				model.addAttribute("message", "Patient name fields cannot be empty.");
				return "prescription_create";
			}
			if(p.getDoctor_ssn().isEmpty() || p.getDoctor_ssn().matches("^0{1}[0-9]{8}")
					|| p.getDoctor_ssn().matches("^9{1}[0-9]{8}") || p.getDoctor_ssn().length() != 9){
				// Patient SSN is empty or starts with 0 or 9
				model.addAttribute("message", "Please enter a social security number that does not start with 0 or 9 and is 9 digits in length.");
				return "prescription_create";
			}
			if(!p.getDoctor_ssn().matches("^[0-9]+$")){
				// Patient SSN contains non-numeric digits
				model.addAttribute("message", "Please enter an SSN that does not contain non-numeric values!");
				return "prescription_create";
			}
			if(p.getQuantity() <= 0 || p.getQuantity() > 31){
				// Quantity is 0 or less or is too large
				model.addAttribute("message", "Quantity is less than or equal to 0 or is too large. Please try again.");
				return "prescription_create";
			}

			p.setDoctor_ssn(p.getDoctor_ssn().replaceAll("[^0-9]", ""));
			p.setPatient_ssn(p.getPatient_ssn().replaceAll("[^0-9]", ""));
			p.setDrugName(p.getDrugName().replaceAll("[^a-zA-Z0-9]", " "));
			p.setDoctorFirstName(p.getDoctorFirstName().replaceAll("[^a-zA-Z]", " "));
			p.setDoctorLastName(p.getDoctorLastName().replaceAll("[^a-zA-Z]", " "));
			p.setPatientFirstName(p.getPatientFirstName().replaceAll("[^a-zA-Z]", " "));
			p.setPatientLastName(p.getPatientLastName().replaceAll("[^a-zA-Z]", " "));


			// Validate that Drug name exists.
			query = "SELECT * FROM drug WHERE tradeName = ?";
			ps = conn.prepareStatement(query);
			ps.setString(1, p.getDrugName());
			rs = ps.executeQuery();

			int drugId = 0;
			if (!rs.next()) {
				// Drug name does not exist.
				model.addAttribute("message", "Drug name does not exist.");
				return "prescription_create";
			}else{
				drugId = rs.getInt("drug_id");
			}


			java.sql.Date date = new java.sql.Date(System.currentTimeMillis());
			//LocalDate date = LocalDate.now();

			//Date longDate = new Date(date.toEpochDay());
			//String dt = longDate.toString();

			try{
				String sql = "INSERT INTO drugstoredb.prescription (rxNumber, patient_id, doctor_id, drug_id, quantity, date) VALUES (? ,?, ?, ?, ?, ?)";
				p.setRxid(generateRXNumber());

				ps = conn.prepareStatement(sql);
				ps.setString(1,p.getRxid());
				ps.setInt(2, pId);
				ps.setInt(3, docId);
				ps.setInt(4, drugId);
				ps.setInt(5, p.getQuantity());
				ps.setDate(6, date);


				ps.executeUpdate();
				conn.commit();
			}catch (Exception e){
				model.addAttribute("message", "It's execute!");
			}




			// Set message and prescription.
			model.addAttribute("message", "Prescription created.");
			model.addAttribute("prescription", p);

			return "prescription_show";
		} catch (SQLException e) {
			// Error inserting prescription.
			model.addAttribute("message", "Error inserting prescription.");
			return "prescription_create";
		}finally {
			if(conn != null){
				try {
					conn.close();
				}catch (SQLException e){

				}
			}
		}
	}

	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */
	public static String generateRXNumber() {
		StringBuffer sb = new StringBuffer();
		Random random = new Random();

		for (int i = 0; i < 8; i++) {
			sb.append(random.nextInt(10));
		}

		return sb.toString();
	}

	private Connection getConnection() throws SQLException {
		Connection conn = Objects.requireNonNull(jdbcTemplate.getDataSource()).getConnection();
		return conn;
	}

}
